Git & Github Ninja - Fernando Daciuk

Section 1.1:

    https://git-scm.com

    git --version (it shows you the current version you have)
    git (it shows you the help info)
    git init (initializes a repository)

        ls -la (using '-la' it lists everything)
        touch index.html ('touch' creates a file)

    git status (it shows you the current files' status inside the repo)

Section 1.2:

    GIT STAGES / GIT MOMENTS:

    - Working Directory (before files being added)
    - Staging Area (once you add the file)
    - .git directory (repository)

    git add <file name> (then the file goes to the 'staging area')

    git config --global user.name "Paulo Pamplona"
    git config --global user.email "pamplonapaulo@gmail.com"
    git config -l (it lists your config)
    git config --list (same)

    git commit -m "any message" (then the files go to the 'repository')

Section 1.3: GIT LOG

    Git Log gives you a log from all your commits, including an autogenerated hash:

        git log

    Now change anything on your file. Then get the status again. The file now is under the 'Working Directory' again.

    Git Diff shows you the exactly differences:

        git diff

    Now run again 'git add <file name>'.
    Then commit it again: git commit -m "message".
    After this commit, pay attention on the short hash now given to you.

    Running again the 'git log', you gonna get all your commitments.

Section 1.4:

    You may add more than one file at once, like this:

        git add index.html style.css class-notes.txt

    Or add all files at once:

        git add .

    git diff X git diff --staged

        git diff: working dir VS. staged
        git diff --staged: staged vs. repository (or same as changes not committed)

Section 1.5:

    git diff <file name> - so you get a single file's changes:

        git diff index.html
        git diff style.css

    git log --name-status (it shows also which files has changes per commit)

    git diff <commit 1 commit2> (it shows differences between specifics commits)
    (actually the first 7 chars from the hash are enough)

    git diff dc624ab 6a51c9d (example)

    IMPORTANT NOTE:
    Do not take too long to commit between your changes, do it every single break point on project's history. This is how you will be able to come back in time, when needed.

Section 1.6:

    For removed files. How to remove from git directory and tree?
    In case the file style.css has been removed.
    
    What to do? Type it:
    git rm style.css

    Then commit it:
    git commit -m "removed style.css"

    Then if you type "git log --name-status", files now include another status: 'D', which means deleted. (We saw before 'M' for modified and 'A' for added.)

    If you run a git diff with an old commit, such as 'git diff dc624abd7cd4f6279e080bf2247e54b8c65d0a61', it might show you stuff from the deleted file, headed by a quote like "deleted file mode 100644".

Section 2.1:

    Repositório para dúvidas dos alunos:
    https://github.com/da2k/curso-git-e-github-ninja/issues

    Another Bash command:
        ls -l
        (The -l switch turns on long listing format)
        Learn more: https://www.garron.me/en/go2linux/ls-file-permissions.html

    Short review:
        if you create a file, then git it with 'add' : git add 'file name'
        if you delete a file, then git it with 'rm' : git rm 'file name'

    In case both actions are needed, a simple 'git add .' doesn't work totally.
    The deleted file will still be waiting for the proper action, which would be "git rm 'file name'"

        But there are another way to make everything at once:

            git add --all
            That works for NEW files, MODIFIED files and, also, for DELETED files.

            The same command, in short, is:
            git add -A

    * * *

    Just a reminder:
        Commits are specific breakpoints in your history.

    * * *

Section 2.2:

    The '.gitignore' file

    Usually Linux (and UNIX) have config files. Some of it's standars are followed by Git. It's called a 'dot file', begins with a dot. Those files are hidden in a default view. But you can see them typing something like: 'ls -la'.

    Supposedly there are some files we don't want to track with git, out of git's tree. So what to do?

    Professor now installs GULP.js:

        npm i --save-dev gulp

    By installing GULP, you get a folder called 'node_modules'. Inside it there is the GULP folder. Usually, you don't need it versioned inside the project. And by installing GULP, your package.json gets this dependency.

    So now, the folder and the json file are not being tracked by Git.

    The good practice in this case is to ignore the folder and track the package.json. By running "npm install" after edit your package.json, any developer in the team will get all dependencies needed. Everything inside the folder 'node_modules' is controled by the way you set the package.json. Long story short: track with Git only the package.json, do not track it's dependencies themselves.

    How to ignore this folder? Run this:

        echo "node_modules" >> .gitignore

            it writes 'node_modules' inside a file named '.gitignore', which will be created in case it doesn't exists yet.

    Tip: inside the Terminal, how to show a file's content? Use 'cat'.

        cat .gitignore

    Now after include the folder's name insde the .gitignore, Git is already ignoring it.

Section 2.3:

    Big mistakes and undoing them.

    Now supposedly that you didn't add the node_modules inside the .gitignore.
    Then imagine that you ran 'git add .' and by this you got everything staged.
    Worst: Imagine that you also commited this mess. The whole directory inside the repo.

    In this situation, when you realize the mistake you will have to include it in the .gitignore. Then you will also have to remove manually the directory, remove ir from the git's stage and commit this:

        rm -r node_modules (removing the folder itself)
        git add --all (removing from the git)
        git commit -m "removed node_modules"

    Now just include a new dependency:

        npm i --save-dev gulp-concat
        (but this time we already put the node_modules at the .gitignore)
        A new package will rebuild the whole node_modules, since you have the other dependencies inside the package.json.

    In case somehow you decide to include the node_modules on the git, now you can't. In order to do that, you would have to run:

        git add -f node_modules

    To remove it once again, keep using the '-f' to 'Force' it:

        git rm -r -f node_modules
        (reminder the '-r' is just cuz it's a folder)

    But guess what? By doing 'git -rm -r -f node_modules' like that you actually deleted the entire folder again. So how to remove it from git without delete the folder? Here is:

        git rm -rf node_modules/ --cached

    That way, it removes from git but keeps the original files.

    End of this section. Yes, it was a kinda weird class this one. My notes were written while professor showed all stuff in his own way. Please don't blame me.
    :)

Section 2.4:

    How to add files that are already staged to the .gitignore ?

        1. Add them to the .gitignore file.

        2. git rm <file name> --cached (to ensure the file won't be deleted)

        3. git commit -m "something now ignored"

    * * *

    Professor now includes at .gitignore the ".DS_Store" file, which is a Mac/Apple file. that should be ignored as well. Then he shows how to commit a file that is already in the git repo, skipping the staging step - but it does all at once:

        git commit -a -m "add .DS_Store to .gitignore"

    Boom! The working directory is already clean.

    For Mac or Linux users, there is a little shorthand type for this command, '-am':

        git commit -am "add .DS_Store to .gitignore"

    That kind of process might be a bit dangerous. So be careful.

    * * *

        In a Mac, you can keep a .gitignore file inside the user's folder, like when you always want to ignore the same kind of files, a setting for any project you may have.

            git config --global core.excludesfile ~/.gitignore (on user's root folder)

        So here are what I just ran:

            git config --global core.excludesfile ~/.gitignore

            echo ".DS_Store" >> ~/.gitignore

            echo "node_modules" >> ~/.gitignore

        












Section 2.5:
Section 2.6:

Section 3.1:
Section 3.2:
Section 3.3:
Section 3.4:
Section 3.5:
Section 3.6:

Section 4.1:
Section 4.2:
Section 4.3:
Section 4.4:
Section 4.5:
Section 4.6:

Section 5.1:
Section 5.2:
Section 5.3:
Section 5.4:
Section 5.5:
Section 5.6:

Section 6.1:
Section 6.2:
Section 6.3:
Section 6.4:
Section 6.5:
Section 6.6:

Section 7.1:
Section 7.2:
Section 7.3:
Section 7.4:
Section 7.5:
Section 7.6:

Section 8.1:
Section 8.2:
Section 8.3:
Section 8.4:
Section 8.5:
Section 8.6:
