Git & Github Ninja - Fernando Daciuk

Section 1.1:

    https://git-scm.com

    git --version (it shows you the current version you have)
    git (it shows you the help info)
    git init (initializes a repository)

        ls -la (using '-la' it lists everything)
        touch index.html ('touch' creates a file)

    git status (it shows you the current files' status inside the repo)

Section 1.2:

    GIT STAGES / GIT MOMENTS:

    - Working Directory (before files being added)
    - Staging Area (once you add the file)
    - .git directory (repository)

    git add <file name> (then the file goes to the 'staging area')

    git config --global user.name "Paulo Pamplona"
    git config --global user.email "pamplonapaulo@gmail.com"
    git config -l (it lists your config)
    git config --list (same)

    git commit -m "any message" (then the files go to the 'repository')

Section 1.3: GIT LOG

    Git Log gives you a log from all your commits, including an autogenerated hash:

        git log

    Now change anything on your file. Then get the status again. The file now is under the 'Working Directory' again.

    Git Diff shows you the exactly differences:

        git diff

    Now run again 'git add <file name>'.
    Then commit it again: git commit -m "message".
    After this commit, pay attention on the short hash now given to you.

    Running again the 'git log', you gonna get all your commitments.

Section 1.4:

    You may add more than one file at once, like this:

        git add index.html style.css class-notes.txt

    Or add all files at once:

        git add .

    git diff X git diff --staged

        git diff: working dir VS. staged
        git diff --staged: staged vs. repository (or same as changes not committed)

Section 1.5:

    git diff <file name> - so you get a single file's changes:

        git diff index.html
        git diff style.css

    git log --name-status (it shows also which files has changes per commit)

    git diff <commit 1 commit2> (it shows differences between specifics commits)
    (actually the first 7 chars from the hash are enough)

    git diff dc624ab 6a51c9d (example)

    IMPORTANT NOTE:
    Do not take too long to commit between your changes, do it every single break point on project's history. This is how you will be able to come back in time, when needed.

Section 1.6:

    For removed files. How to remove from git directory and tree?
    In case the file style.css has been removed.
    
    What to do? Type it:

        git rm style.css

    Then commit it:

        git commit -m "removed style.css"

    Then if you type "git log --name-status", files now include another status: 'D', which means deleted. (We saw before 'M' for modified and 'A' for added.)

    If you run a git diff with an old commit, such as 'git diff dc624abd7cd4f6279e080bf2247e54b8c65d0a61', it might show you stuff from the deleted file, headed by a quote like "deleted file mode 100644".

Section 2.1:

    Repositório para dúvidas dos alunos:
    https://github.com/da2k/curso-git-e-github-ninja/issues

    Another Bash command:

        ls -l

    (The -l switch turns on long listing format)
    Learn more: https://www.garron.me/en/go2linux/ls-file-permissions.html

    Short review:
        if you create a file, then git it with 'add' : git add 'file name'
        if you delete a file, then git it with 'rm' : git rm 'file name'

    In case both actions are needed, a simple 'git add .' doesn't work totally.
    The deleted file will still be waiting for the proper action, which would be "git rm 'file name'"

        But there are another way to make everything at once:

            git add --all

        That works for NEW files, MODIFIED files and, also, for DELETED files.

        The same command, in short, is:
        
            git add -A

    * * *

    Just a reminder:
        Commits are specific breakpoints in your history.

    * * *

Section 2.2:

    The '.gitignore' file

    Usually Linux (and UNIX) have config files. Some of it's standars are followed by Git. It's called a 'dot file', begins with a dot. Those files are hidden in a default view. But you can see them typing something like: 'ls -la'.

    Supposedly there are some files we don't want to track with git, out of git's tree. So what to do?

    Professor now installs GULP.js:

        npm i --save-dev gulp

    By installing GULP, you get a folder called 'node_modules'. Inside it there is the GULP folder. Usually, you don't need it versioned inside the project. And by installing GULP, your package.json gets this dependency.

    So now, the folder and the json file are not being tracked by Git.

    The good practice in this case is to ignore the folder and track the package.json. By running "npm install" after edit your package.json, any developer in the team will get all dependencies needed. Everything inside the folder 'node_modules' is controled by the way you set the package.json. Long story short: track with Git only the package.json, do not track it's dependencies themselves.

    How to ignore this folder? Run this:

        echo "node_modules" >> .gitignore

            it writes 'node_modules' inside a file named '.gitignore', which will be created in case it doesn't exists yet.

    Tip: inside the Terminal, how to show a file's content? Use 'cat'.

        cat .gitignore

    Now after include the folder's name insde the .gitignore, Git is already ignoring it.

Section 2.3:

    Big mistakes and undoing them.

    Now supposedly that you didn't add the node_modules inside the .gitignore.
    Then imagine that you ran 'git add .' and by this you got everything staged.
    Worst: Imagine that you also commited this mess. The whole directory inside the repo.

    In this situation, when you realize the mistake you will have to include it in the .gitignore. Then you will also have to remove manually the directory, remove ir from the git's stage and commit this:

        rm -r node_modules (removing the folder itself)
        git add --all (removing from the git)
        git commit -m "removed node_modules"

    Now just include a new dependency:

        npm i --save-dev gulp-concat
        (but this time we already put the node_modules at the .gitignore)
        A new package will rebuild the whole node_modules, since you have the other dependencies inside the package.json.

    In case somehow you decide to include the node_modules on the git, now you can't. In order to do that, you would have to run:

        git add -f node_modules

    To remove it once again, keep using the '-f' to 'Force' it:

        git rm -r -f node_modules
        (reminder the '-r' is just cuz it's a folder)

    But guess what? By doing 'git -rm -r -f node_modules' like that you actually deleted the entire folder again. So how to remove it from git without delete the folder? Here is:

        git rm -rf node_modules/ --cached

    That way, it removes from git but keeps the original files.

    End of this section. Yes, it was a kinda weird class this one. My notes were written while professor showed all stuff in his own way. Please don't blame me.
    :)

Section 2.4:

    How to add files that are already staged to the .gitignore ?

        1. Add them to the .gitignore file.

        2. git rm <file name> --cached (to ensure the file won't be deleted)

        3. git commit -m "something now ignored"

    * * *

    Professor now includes at .gitignore the ".DS_Store" file, which is a Mac/Apple file. that should be ignored as well. Then he shows how to commit a file that is already in the git repo, skipping the staging step - but it does all at once:

        git commit -a -m "add .DS_Store to .gitignore"

    Boom! The working directory is already clean.

    For Mac or Linux users, there is a little shorthand type for this command, '-am':

        git commit -am "add .DS_Store to .gitignore"

    That kind of process might be a bit dangerous. So be careful.

    * * *

        In a Mac, you can keep a .gitignore file inside the user's folder, like when you always want to ignore the same kind of files, a setting for any project you may have.

            git config --global core.excludesfile ~/.gitignore (on user's root folder)

        So here are what I just ran:

            git config --global core.excludesfile ~/.gitignore

            echo ".DS_Store" >> ~/.gitignore

            echo "node_modules" >> ~/.gitignore

Section 2.5: commit without parameters

    If you run a commit without '-m' and any message, it opens an editor such as Vim.

    Then you will be able to include not only a title, but a body message.

        git commit

    To escape from Vim after typer your message, press 'Esc' key, then type ':wq' and hit 'Enter' key. (Yup. Vim sucks.)

    Can we use another text editor insted of Vim? Yes, we can. Under the Config settings there is this line:

        core.editor=vim

        Btw, just a recap => to show your settings, type:

            git config --list

    In order to change the editor vim to another one, such as VS Code, run this:
    
        git config --global core.editor atom (to change it for atom)

    But a saver way to get it working would be:

        git config --global -e (that opens the settings and you edit all you need)
    
    Then underneath the [core] area, you gonna include or edit:

        editor = code --wait (here we want VS Code)

Section 2.6: LOGS features

    git log --name-status

        It shows you the status of the files: M (modified), D (deleted), A (added)

    git log --pretty=oneline

        Shows less stuff to you in just one line.

    git log --abbrev-commit

        that show you the commit tokens in short

    You also may mix some of these features, like that:

        git log --pretty=oneline --abbrev-commit

    Get some statistics - very cool:

        git log --stat

    What did you change? (That looks like git diff)

        git log -p

    How many commits you want to see?

        git log -p -3 (just the 3 last commits)

Section 3.1: Branches

    Branches are ramifications.

    Basic command:

        git branch

    By default, it shows you just the 'master' branch.

    Usually you won't change anything inside the 'master' branch.
    So you create other environments to make your changes without impact the 'master' branch until you make sure you want to update it.

    Hot to create a branch?

        git branch <new branch name>

    At it's creation, the new branch starts with the same history of files that the 'master' has.

    And then each new change at one branch doesn't impact other branches.

    How to switch to another exist branch?

        git checkout <existent branch name>

    Done. Now you are not at the 'master' branch anymore, but in the one you created.

    How to check in wich branch you are? Some terminals may show you already in the prompt. But if not your case, run:

        git branch

    Then it shows you a '*' beside the branch where you are. 

    OBS: Git does not commit empty directories

    Once you start to make new changes under a specific branch, you will realize that those changes won't be considered at the master branch or any other existent branch. Each branch has it's own complete environment.

Section 3.2: MERGE

    How to take one's branch's changes to the master branch?

    Under master's branch, run:

        git merge <branch's name>

    Done. Now master just got all changes from the other branch.

    Be aware: by creating a branch you inherit it's current files at that time.

    Every branch can build another sub branch.

    Standards Best Practices?

        'master'
        master branch have to be the final and stable version, the more updated one. Never a test environment

        'dev'
        Use a 'dev' branch. Work from there, like a 'beta' version. The master development's version.

        features
        Have specific branches for specific features, like: 'js', 'css', 'js-default', 'style-css', etc.

Section 3.3:


    How to create and move to a new branch at once?

        git checkout -b <name of the new branch>

    How to rename a branch?

        - Get inside the branch. Then:

        git branch -m <new name>

    How to remove a branch?
    In case sub branches have stuff already sent to their up levels, if your 'dev' branch has everything the others have, you should remove them.

        git branch -D <branch's name>

    You can also delete many at once:

        git branch -D <branch's name 1> <branch's name 2> <branch's name 3>

    You should create your own workflow to manage all your branches. Professor just suggested one way. Find yours.

    After release new features and make sure they are working properly, so you can merge those updates into the master branch. Once you get it, you can delete the old branches.

    How to create a new empty branch?

        git checkout --orphan <branch name>

    You may want to do this when your project has a need of a new history, with 2 different structures: like static files from your project vs. the code that your project is about.

    Once you run the command, all the files look like you just did a 'git add .' on them, they look like changes to be commited on the staging area. At this point you can remove them or commit them to keep using what you need. To remove all, run:

        git rm -rf .

    It seems that if you create a orphan branch but do not commit it, it won't actually exist.

    An empty branch started like that should never be merged with your master branch. 

Section 3.4: Creating Repositories

    Local Repos or Remote Repos

        Remotely, with GitHub.

        Locally, in your own machine.

    Local Repositories

        Go out of your main folder now.

            cd ..
        
        There, with no branches or git initialized, make a folder ended by .git, like that:

            mkdir _fernando-daciuk.git

        List what you got so far. You should have these 2 folders:

            _fernando-daciuk
            _fernando-daciuk.git (this one will become our repo)

        According with the professor, doesn't make sense you have your project and the project's repository at the same machine.

        How to create the repo? Inside the _fernando-daciuk.git folder, run this:

            git init --bare

        It craetes the same directory's structure, but clean for now cuz it's not connected.

        How to connect the repo?

            git remote add <origin> <repository>

        To get the <repository> path, go inside the folder and run:

            pwd

        It gives you the full path. In our case is:

        /Applications/MAMP/htdocs/_devOps/_GIT/udemy/_fernando-daciuk.git

        And for the <origin>, it's a good practice to call just 'origin'.

        That said, we would run this to set the connection:

            git remote add origin /Applications/MAMP/htdocs/_devOps/_GIT/udemy/_fernando-daciuk.git

Section 3.5:

        How to check which repos are created and listed

            git remote -v

        It returns something like this:

        origin  /Applications/MAMP/htdocs/_devOps/_GIT/udemy/_fernando-daciuk.git (fetch)
        origin  /Applications/MAMP/htdocs/_devOps/_GIT/udemy/_fernando-daciuk.git (push)

        How to sync your local environment with a repository:

            git push <origin> <branch>

        It sents to <origin> what is in a <branch> :

            git push origin master

Section 3.6:

        How to clone a repo? Inside the destiny's folder, run:

            git clone <repository name>

        But before 'push' someone's files to the repository, this guy have to be updated. If repo is already changing, the guy can't be behind.
        
        That's when comes 'PULL'. If you try to PUSH something not updated, an error will come asking you to PULL before this.

            git pull origin master (it brings updates files from the repo to your local env)

        Now we are good to PUSH eveything from the local to the repo.

            git push origin master

        OBS: In a team work, before start your daily work, run a git pull to update your local.

Section 4.1: Workflow/ Team work / Commits' history

    Version Controll System

    Rule #1: run PULL before start your day, it brings you all updates.

    Rule #2: never run commits inside 'master's branch.

    Rule #3: use specific branches for each single feature.

    Commit's history

        Overriding commits: --amend

            git commit -m "another message" --amend

            That way it overrides the previous commit with this new one. It's a good practice to avoid unecessary commits.

            But do not use --amend in case you already used PUSH to send your changes. If your previous commit remains local, it's ok to use --amend.

Section 4.2: Automerge - solving conflicts

    When two or more branches make changes at the same file in close lines, git will reject a merge and show you the conflict.

    How to solve this?

        Option #1: Abort merge

            git merge --abort

        Oprtion #2: Fix it manually

            Check the file where git shows you the conflit.
            Pick the code you want and remove what you don't. 
            Run another commit.
            Done.

        The issue happens only when you and your coworker change close lines. If not, automerge will run nicely.
    
Section 4.3: Merge Tool

    Now how about many complex conflicts? Use "merge tool".

    Mac users may try: http://gitx.frim.nl/

    Another option is the tool meld:

        Installation:

            git config --global merge.tool meld

            It includes a line in your config (git config -l):

                merge.tool=meld

            Then once you get a conflict, you run:

                git mergetool

        Most merge tools create files called 'orig'. You can include them at .gitignore

    
    
    git checkout used to undo changes:

        git checkout <file with changes to undo>   

Section 4.4:

    git diff ignoring any space changes:

        git diff -w

        It shows you only real changes.


    git checkout, other uses:

        Undo Merges

            git checkout <file with changes to undo>   

        Time Travel

            git checkout <commit code>

            By doing this, git will recommend you to create a new branch to retain new commits:

                git checkout -b <new branch>

        Create a new branch and change to it in one line:

            git checkout <branch> -b <new branch>

            ex: git checkout dev -b new-branch-based-on-dev

        You may also move back in time and create a new branch at once:

            ex: git checkout 7c5e6a9 -b back-in-time-branch

Section 4.5: git stash

    Less urgent job to be done later.

    In case you commited something that should be done later, you may want to run 'git stash' to place it in a virtual side area
    You can bring those changes back in a proper time.
    So by running 'git stash', it hides the changes for now.
    By running 'git stash list', it shows you the commit you were when you change it.
    'git stash apply' takes you back to the first stash.
    This may be more necessary when you are working on something then for any reason you have to stop this job to work in another part of the same project.
    So insted of committing an unfinish task you put those changes aside, waiting for a chance to get finished and then commited.
    You should use this feature only for urgent needs.

    List all stashes:

        git stash list

    Recover those changes stored aside:

        git stash apply
        
    or being more specific:

        git stash apply stash@{1}


    Drop a stash:

        git stash drop stash@{<stash number>} // ex: git stash drop@{0}

    The stash '0' is always the fresh one.

    Doing everything at once: apply + drop

        git stash pop

Section 4.6: Custom Logs

    git log --pretty=format
    
    But it can take parameters:

        git log --pretty=format:"%h - %an, %ar : %s"

            %H  =   Commit hash
            %h  =   Abbreviated commit hash
            %T  =   Tree hash
            %t  =   Abbreviated tree hash
            %P  =   Parent hashes
            %p  =   Abbreviated parent hashes
            %an =   Author name
            %ad =   Author date (same as '--date=option')
            %ar =   Author date, relative (relative is like 'two hours ago')
            %s  =   Subject (commit title)
            %cn =   Comitter name
            %ce =   Comitter email
            %cd =   Comitter date
            %cr =   Comitter date, relative (relative is like 'two hours ago')

Section 5.1: GitHub

    Before push an existent project to github, check again if we already have a repo:

        git remote -v

    At this moment, it returned me:

        origin  /Applications/MAMP/htdocs/_devOps/_GIT/udemy/_fernando-daciuk.git (fetch)
        origin  /Applications/MAMP/htdocs/_devOps/_GIT/udemy/_fernando-daciuk.git (push)

    How to change the origin's URL:
    
        git remote set-url <origin> <url>

    In this case, I typed:

        git remote set-url origin https://github.com/pamplonapaulo/cursoGitGithubNinjaBackup.git

    Then, checking again the remote origin, I got:

        origin  https://github.com/pamplonapaulo/cursoGitGithubNinjaBackup.git (fetch)
        origin  https://github.com/pamplonapaulo/cursoGitGithubNinjaBackup.git (push)

    In case the repo has a address with https, it will ask your password and username to PUSH it to the origin.

    To send it to github, then now run:

        git push origin master

Section 5.2:
Section 5.3:
Section 5.4:

    Closing issues from commitments
    
        Type the commit command with a normal text message, added by special words and also the hash of the issue:

            - fix
            git commit -m "any message - fix #2" (this will close the issue #2)

            - resolve
            git commit -m "any message - resolve #1"

            Nothing will change untill your push. 

Section 5.5: Branches inside GitHub

    Sending another branch to the origin is just like sending the master branch.

        As we already know, sending the master is:

            git push origin master

        And sending a branch named 'dev' would be like this:

            git push origin dev


        If your named branch has updates to be sent to the master branch, then 'pull request' on your github is the way.

        Pull Request - it's a merge request

            once you handle this pull and merge from github, what to do on your local files?

        On your local files, move yourself to the master branch and run a PULL command, which will bring from the github origin to your local master

            git pull origin master

Section 5.6: Removing branches


    Deleting branches from your github

            First: Why?

            From GItHub, you can just click in the trash icon. The good thing is that you can undo this by the button 'restore'.

        In the command line:

        First, delete the branch:

            git branch -D dev

            (Deleted the dev's branch)

        After that, you run:

            git push origin <branch>  --delete
            ex: git push origin dev --delete

            Once you do this by the command line, there is no turning back from this point.

            Same command could be ran like that:
                git push origin :<branch>
                ex: git push origin :dev

Section 6.1: cache de senha

    Global Config: getting yoru password on cache.

        git config --global credential.helper cache

    So next time you type your password, it will get cached.

    How to undo that?

        git config --global --unset credential.helper

    How to show all your config?

        git config --global --list

    How to keep this data just for a while?

        git config --global credential.helper 'cache --timeout=3600' (we have to use these quotes)

    That way, your credentials will expire in 3600 seconds (one hour)

Section 6.2: overview do repositório no github

Section 6.3: configuração do repositório no github



    Adding new colaborators:

        https://github.com/pamplonapaulo/<repository name>/settings/access

    
    Branch protection rules

    https://github.com/pamplonapaulo/cursoGitGithubNinjaBackup/settings/branches

Section 6.4: perfil do usuário e configurações

    https://github.com/settings/notifications

Section 6.5: configurações do usuário - parte 2

    SSH Private key

        https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh


    https://github.com/settings/tokens  


    https://github.com/settings/organizations

Section 6.6: onde conseguir ajuda

    https://github.com/da2k/curso-git-e-github-ninja

Section 7.1: Markdown

    It's a language, another way to write HTML in a more legible way.

    Markdown editor it's a need.

    https://guides.github.com/features/mastering-markdown/

    #Title example

        It needs just a hash. It renders as H1 html.

    ##Title example
    
        Two hashes, it renders as H2 html.

    ###Title example
    
        Three hashes, it renders as H3 html.

    ####Title example
    
        Four hashes, it renders as H4 html.

    So on...

    Another way could be:

    Another Title in H1
    ===================

    Another Title in H2
    -------------------

Section 7.2: Some tags

    Emphasis:

        html:       <em>Emphasised Content</em>
        markdown:   *Emphasised Content*
        markdown:   _Emphasised Content_

    Bold:

        html:       <strong>Strong Content</strong>
        markdown:   **Strong Content**
        markdown:   Strong Content__

    Links:

        html:       <a href="https://google.com" title="Title">Link</a>
        markdown:   [Link]("https://google.com" "Title")
        markdown:   [Link]("https://google.com")
        markdown:   <https://google.com>

        markdown:   <mailto:fake@gmail.com>


    You may want to use HTML tags while writting in Markdown. Some of them work - but not all.

    In case you have to show underscore or '*', you need to scape it using the '\'.

Section 7.3: Quotation, Lists, Images

    Quotation

    Super simple. Just start a line with '>':

        > This is a quote.

    
    Lists

        Dash and Dash space. All of the examples bellow work.

        - Item 1
        - Item 2
        - Item 3
          - Subitem 3.1
          - Subitem 3.2
    
        1. Item 1
        2. Item 2
        3. Item 3

        1. Item
        1. Item
        1. Item

        1. Item
        - Item
        - Item

    Images

        ![]()

            ![Image's Alt](https://upload.wikimedia.org/wikipedia/commons/0/0a/He-Man_and_the_Masters_of_the_Universe.jpg)

Section 7.4: Tables, Monospace Text

    ## Tables
    Products | Prices
    ----------:|:-------
    Rice | 3 USD
    Beans | 1 USD
    Potato | 10 USD
    Flower | 9 USD

    ## Tables
    Products | Prices
    :----------:|:-------: (here we get center align)
    Rice | 3 USD
    Beans | 1 USD
    Potato | 10 USD
    Flower | 9 USD


    Monospace Text (code style)

        ## Monospace
        The tag `<p>` is used to create paragraphs

        ## Here a block of colored JS code:

        ```js <== this is what sets the color
        function(){
        console.log('hello);
        }
        ```

        ## a block of colored PHP code:
        ```php <==this is what sets the color
        <?php
        $var = 'any string';
        echo $var;
        ?>
        ```

Section 7.5: Task Lists, References, Lines

    - [ ] This is a checkbox 1
    - [x] This is a checkbox 2
    - [ ] This is a checkbox 3
    - [ ] ~~This is a checkbox 3~~


    ## References/Variables:

    [JS]: https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Unofficial_JavaScript_logo_2.svg/1200px-Unofficial_JavaScript_logo_2.svg.png

    ![Javascript's Logo][JS]
    ---
    ![Javascript's Logo][JS]
    ---
    ![Javascript's Logo][JS]

    ## Lines

    ---
    ---
    ---

Section 7.6: Attachments, README.md, Gist

https://gist.github.com/

https://jobs.github.com/positions?location=Europe



    














Section 8.1:
Section 8.2:
Section 8.3:
Section 8.4:
Section 8.5:
Section 8.6:
