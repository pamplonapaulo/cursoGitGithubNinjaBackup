Git & Github Ninja - Fernando Daciuk

Section 1.1:

    https://git-scm.com

    git --version (it shows you the current version you have)
    git (it shows you the help info)
    git init (initializes a repository)

        ls -la (using '-la' it lists everything)
        touch index.html ('touch' creates a file)

    git status (it shows you the current files' status inside the repo)

Section 1.2:

    GIT STAGES / GIT MOMENTS:

    - Working Directory (before files being added)
    - Staging Area (once you add the file)
    - .git directory (repository)

    git add <file name> (then the file goes to the 'staging area')

    git config --global user.name "Paulo Pamplona"
    git config --global user.email "pamplonapaulo@gmail.com"
    git config -l (it lists your config)
    git config --list (same)

    git commit -m "any message" (then the files go to the 'repository')

Section 1.3:

    GIT LOG

    git log (it gives you a log from all your commits, including an autogenerated hash)

    Now change anything on your file. Then get the status again. The file now is under the 'Working Directory' again.

    git diff (it shows you the exactly differences)

    Now run again 'git add <file name>'.
    Then commit it again: git commit -m "message".
    After this commit, pay attention on the short hash now given to you.

    Running again the 'git log', you gonna get all your commitments.

Section 1.4:

    You may add more than one file at once, like this:
        git add index.html style.css class-notes.txt

    Or add all files at once:
        git add .

    git diff X git diff --staged

        git diff: working dir VS. staged
        git diff --staged: staged vs. repository (or same as changes not committed)

Section 1.5:

    git diff <file name> - so you get a single file's changes:
        git diff index.html
        git diff style.css

    git log --name-status (it shows also which files has changes per commit)

    git diff <commit 1 commit2> (it shows differences between specifics commits)
    (actually the first 7 chars from the hash are enough)

    git diff dc624ab 6a51c9d (example)

    IMPORTANT NOTE:
    Do not take too long to commit between your changes, do it every single break point on project's history. This is how you will be able to come back in time, when needed.

Section 1.6:

    


Section 2.1:
Section 2.2:
Section 2.3:
Section 2.4:
Section 2.5:
Section 2.6:

Section 3.1:
Section 3.2:
Section 3.3:
Section 3.4:
Section 3.5:
Section 3.6:

Section 4.1:
Section 4.2:
Section 4.3:
Section 4.4:
Section 4.5:
Section 4.6:

Section 5.1:
Section 5.2:
Section 5.3:
Section 5.4:
Section 5.5:
Section 5.6:

Section 6.1:
Section 6.2:
Section 6.3:
Section 6.4:
Section 6.5:
Section 6.6:

Section 7.1:
Section 7.2:
Section 7.3:
Section 7.4:
Section 7.5:
Section 7.6:

Section 8.1:
Section 8.2:
Section 8.3:
Section 8.4:
Section 8.5:
Section 8.6:
